# https://docs.travis-ci.com/

language: cpp
sudo: true

branches:
  only: # whitelist
    - master
    - develop
    - production
    - /^v\d*\.\d*\.\d*$/
    - /^travis.*$/
  except: # blacklist
    - /^appveyor.*$/

matrix:
  include:
    - name: My Ubuntu Build
      os: linux
      dist: jammy # Ubuntu 22.04 (Jammy Jellyfish) Build Environment
      compiler: gcc
      env:
        - C_COMPILER=gcc-11
        - CXX_COMPILER=g++-11
        - CXX_FLAGS="-Wall -Wextra -Wpedantic -Wvla -Wno-noexcept-type -Wno-format-zero-length -ftemplate-depth=512"
        - BUILD_TYPE="Release"


before_install:  
  - sudo apt-get update -qq
  - sudo apt-get install -qq qt6-base-dev qt6-multimedia-dev qt6-translations-l10n qt6-tools-dev
  - dir "/usr/lib/qt6/"
  - whereis qt6-base-dev
  - Qt6_Dir="/usr/lib/qt6/"

  - openssl version  # OpenSSL 3.0.2
  - whereis openssl
  - OPENSSL="/usr/lib/ssl/"

install:
  # read the content of the file ./version
  - AppVersion=`cat version`
  - echo "Application Version = ${AppVersion}"

  - echo "TRAVIS_TAG = '${TRAVIS_TAG}'"
  - echo "TRAVIS_BRANCH = '${TRAVIS_BRANCH}'"

  - PROJECT_GIT_DIR="$PWD"
  - echo "PROJECT_GIT_DIR = '${PROJECT_GIT_DIR}'"
  - dir "${PROJECT_GIT_DIR}" 

  - GCCDumpMachine=`gcc -dumpmachine`
  - GPPDumpMachine=`g++ -dumpmachine`
  - echo "GCC Dump Machine = '${GCCDumpMachine}'"  # x86_64-linux-gnu
  - echo "G++ Dump Machine = '${GPPDumpMachine}'"  # x86_64-linux-gnu
  - CpuArchitecture=${GCCDumpMachine%"-linux-gnu"} # remove suffix
  - echo "CpuArchitecture = '${CpuArchitecture}'"  # x86_64

  - echo "Boost"
  - MY_BOOST_DIR="${TRAVIS_BUILD_DIR}/boost"
  - Boost_ROOT="${MY_BOOST_DIR}/boost_1_77_0"
  - export Boost_ROOT="${Boost_ROOT}"
  - >
    if [ -d "${Boost_ROOT}" ]; then
      echo "Boost is already cached, in '${Boost_ROOT}'"
    else
      # Take action if the directory doesn't exist
      MY_BOOST_URL="https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.bz2"
      MY_BOOST_DOWNLOAD_DIR="$HOME/downloads/boost"
      echo "Downloading Boost..."
      mkdir -p ${MY_BOOST_DOWNLOAD_DIR}
      curl --location --output ${MY_BOOST_DOWNLOAD_DIR}/boost_1_77_0.tar.bz2 ${MY_BOOST_URL}
      # curl -L, --location: in case there is a redirect found
      echo "Installing Boost..."
      # Current Directory = /home/travis/build/setvisible/DownZemAll
      echo "Extracting Boost archive to ${MY_BOOST_DIR}..."
      mkdir -p ${MY_BOOST_DIR}
      tar --bzip2 -x -f ${MY_BOOST_DOWNLOAD_DIR}/boost_1_77_0.tar.bz2 -C ${MY_BOOST_DIR}
    fi

  # split all with ':' in PATH and echo each line so that it's easier to read
  - >
    echo "PATH = ";
    for i in `sed 's/:/\n/g' <<< "$PATH"`; do echo $i; done


#---------------------------------#
#       build configuration       #
#---------------------------------#

before_script:
  - cmake --version             # cmake version 3.16.8
  - ctest --version             # ctest version 3.16.8
  - ${CXX_COMPILER} --version   # g++-11 (Ubuntu 11.2.0-19ubuntu1) 11.2.0
  - ${C_COMPILER} --version     # gcc-11 (Ubuntu 11.2.0-19ubuntu1) 11.2.0

# Current Directory = /home/travis/build/setvisible/DownZemAll
  - LibtorrentRasterbar_ROOT="${TRAVIS_BUILD_DIR}/install-libtorrent"

  - >
    if [ -d "${LibtorrentRasterbar_ROOT}" ]; then
      echo "LibtorrentRasterbar is already cached, in '${LibtorrentRasterbar_ROOT}'"
    else
      # Take action if the directory doesn't exist
      MY_LIBTORRENT_SOURCE_DIR="${PROJECT_GIT_DIR}/3rd/libtorrent-rasterbar"
      MY_LIBTORRENT_BUILD_DIR="$HOME/build-libtorrent"
      echo "Building LibTorrent in '${MY_LIBTORRENT_BUILD_DIR}'"
      echo "installing LibTorrent in '${LibtorrentRasterbar_ROOT}'"
      mkdir -p "${MY_LIBTORRENT_BUILD_DIR}"
      mkdir -p "${LibtorrentRasterbar_ROOT}"
      cd "${MY_LIBTORRENT_BUILD_DIR}"
      dir
      dir ${MY_LIBTORRENT_SOURCE_DIR}
      cmake "${MY_LIBTORRENT_SOURCE_DIR}" -DCMAKE_C_COMPILER="${C_COMPILER}" -DCMAKE_CXX_COMPILER="${CXX_COMPILER}" -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" -DCMAKE_INSTALL_PREFIX="${LibtorrentRasterbar_ROOT}" -DBOOST_ROOT:PATH="${Boost_ROOT}" -DBUILD_SHARED_LIBS=OFF -Dstatic_runtime=ON -DENABLE_TESTS=ON -Ddeprecated-functions=ON -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
      cmake --build .
      ctest -N                # -N gets the list of all the tests in CTest
      ctest . --verbose 
      cmake --build . --target install     
    fi

  - dir ${LibtorrentRasterbar_ROOT}


script:
  - MY_PROJECT_SOURCE_DIR="${PROJECT_GIT_DIR}"
  - MY_PROJECT_BUILD_DIR="$HOME/build-project"
  - MY_PROJECT_INSTALL_DIR="$HOME/install-project"

  - mkdir ./../build-cmake
  - cd ./../build-cmake

  - echo "Building Project in '${MY_PROJECT_BUILD_DIR}'"
  - echo "installing Project in '${MY_PROJECT_INSTALL_DIR}'"
  - mkdir -p "${MY_PROJECT_BUILD_DIR}"
  - mkdir -p "${MY_PROJECT_INSTALL_DIR}"
  - cd "${MY_PROJECT_BUILD_DIR}"
  - dir
  - dir ${MY_PROJECT_SOURCE_DIR}

      # -G "${CMAKE_GENERATOR}"

# Travis CI uploads the cache after the script phase of the build, but before either after_success or after_failure 
cache:
  directories:
    - ${Boost_ROOT}
    - ${LibtorrentRasterbar_ROOT}


#---------------------------------#
#           archives              #
#---------------------------------#

# scripts to run after tests
after_test:
  - cmake --build . --target install
  - strip "./../install-DownZemAll-cmake/DownZemAll"  # removes debug information from executable binary

  - dir ${MY_PROJECT_INSTALL_DIR}
  - ls -al ${MY_PROJECT_INSTALL_DIR}


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

#before_deploy:

#after_deploy:

after_success:
  - echo "success"
 
after_failure:
  - echo "failure"
  - cat "${MY_LIBTORRENT_BUILD_DIR}/CMakeFiles/CMakeOutput.log"
  - cat "${MY_PROJECT_BUILD_DIR}/CMakeFiles/CMakeOutput.log"
