# https://docs.travis-ci.com/

# Rem:  travis-ci.org  or  travis-ci.com  ?
#
# Open source projects and their build history will continue to run on travis-ci.org.
# However, you can be included in the closed beta testing to start migrating 
# your open source repositories to travis-ci.com.

#---------------------------------#
#      general configuration      #
#---------------------------------#
# language: generic # VM have more languages and services available
# language: minimal # VM optimized be faster and use less disk space, 
language: cpp
sudo: true

# branches to build
branches:
  # whitelist
  only:
    - master
    - develop
    - production
    - /^v\d*\.\d*\.\d*$/
    - /^travis.*$/

  # blacklist
  except:
    - /^appveyor.*$/


#---------------------------------#
#               jobs              #
#---------------------------------#
# build and tests OK with Qt version 5.7.1
# build and tests OK with GNU C++ Compiler version 5.3.0
# build and tests OK with CMake version 3.11.1

# Travis-CI:
#  - GNU C++ Compiler version 5 works on Precise and Trusty
#  - Precise ships with CMake 2.8.7
#  - Trusty ships with CMake 3.9.2    => Use Trusty

matrix:
  include:
    - os: linux
      dist: trusty
      env: QT_BASE=55 CXX_COMPILER=g++-5 C_COMPILER=gcc-5 BUILD_TYPE=Release
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - gcc-5
          - g++-5

#---------------------------------#
#    environment configuration    #
#---------------------------------#

before_install:
  - sudo add-apt-repository --yes ppa:ubuntu-sdk-team/ppa
  - if [ "$QT_BASE" = "55"  ]; then sudo add-apt-repository ppa:beineri/opt-qt551-trusty -y; fi
  - sudo apt-get update -qq


install:
  - if [ "$QT_BASE" = "55"  ]; then sudo apt-get install -qq qt55base qt55multimedia qt55translations qt55tools ; source /opt/qt55/bin/qt55-env.sh ; export QTHOME=/opt/qt55 ; fi

  # read the content of the file ./version
  - AppVersion=`cat version`
  - echo "Application Version = ${AppVersion}"

  - echo "TRAVIS_TAG = '${TRAVIS_TAG}'"
  - echo "TRAVIS_BRANCH = '${TRAVIS_BRANCH}'"

  - GCCDumpMachine=`gcc -dumpmachine`
  - GPPDumpMachine=`g++ -dumpmachine`
  - echo "GCC Dump Machine = '${GCCDumpMachine}'"  # x86_64-linux-gnu
  - echo "G++ Dump Machine = '${GPPDumpMachine}'"  # x86_64-linux-gnu

  - echo "Boost"
#  - sudo apt-get install libboost-all-dev # Not good : may install wrong version libboost-all-1.54.0
#  - whereis boost # /usr/include/boost

  - echo "Downloading Boost..."
  - curl --location --output ./3rd/boost/1.72.0/unix/boost_1_72_0.tar.bz2 https://dl.bintray.com/boostorg/release/1.72.0/source/boost_1_72_0.tar.bz2 
    # curl -L, --location: in case there is a redirect found

  - echo "Installing Boost..."
# Current Directory = /home/travis/build/setvisible/DownZemAll
  - MY_BOOST_DIR="$HOME/boost_1_72_0"
  - echo "Extracting Boost archive to ${MY_BOOST_DIR}..."
  - mkdir ${MY_BOOST_DIR}
  - tar --bzip2 -x -f ./3rd/boost/1.72.0/unix/boost_1_72_0.tar.bz2 -C ${MY_BOOST_DIR}
#  - echo "Add Boost to environment PATH..."
#  - export PATH="$PATH:${MY_BOOST_DIR}/boost_1_72_0"


# split all with ':' in PATH and echo each line so that it's easier to read
  - echo PATH =
  - for i in `sed 's/:/\n/g' <<< "$PATH"`; do echo $i; done


#---------------------------------#
#       build configuration       #
#---------------------------------#

before_script:
# Current Directory = /home/travis/build/setvisible/DownZemAll
  - mkdir ./../build-cmake
  - cd ./../build-cmake


script:
  - cmake --version             # cmake version 3.9.2
  - ${CXX_COMPILER} --version   # g++-5 (Ubuntu 5.5.0-12ubuntu1~14.04) 5.5.0 20171010
  - ${C_COMPILER} --version     # gcc-5 (Ubuntu 5.5.0-12ubuntu1~14.04) 5.5.0 20171010
  - cmake ./../DownZemAll -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
      -DCMAKE_C_COMPILER=${C_COMPILER}
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DCMAKE_INSTALL_PREFIX="./../install-DownZemAll-cmake"
      -DENABLE_TESTS=ON
      -DBOOST_ROOT:PATH=${MY_BOOST_DIR}/boost_1_72_0
  - cmake --build .

#---------------------------------#
#            tests                #
#---------------------------------#

# to run your custom scripts instead of automatic tests
#test_script:
  - ctest --version
  - ctest -N                # -N gets the list of all the tests in CTest
  - ctest . --verbose       # <verbose> shows all the test methods


#---------------------------------#
#           archives              #
#---------------------------------#

# scripts to run after tests
#after_test:
  - cmake --build . --target install


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

# creating archives
  - mkdir ./../DownZemAll/bin
  - cd ./../DownZemAll/bin

# zip the files
# DownZemAll_v1.2.0_windows-mingw-x86.zip
# DownZemAll_v1.2.0_windows-mingw-x64.zip
# DownZemAll_v1.2.0_windows-msvc-x86.zip
# DownZemAll_v1.2.0_windows-msvc-x64.zip
# DownZemAll_v1.2.0_x86_64-linux-gnu.tar.gz
  - ZIP_FILE="DownZemAll_v${AppVersion}_${GCCDumpMachine}.tar.gz"
  - tar -czvf ${ZIP_FILE} ./../../install-DownZemAll-cmake/*


# .tar.bz2
# .deb
# .apk
# .dmg // MacOS

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

#before_deploy:

deploy:
  provider: releases
  api_key: $TOKEN       # Set in the settings page of your repository, as a secure variable
  file_glob: true       # Enable wildcard pattern
  file: $ZIP_FILE
  skip_cleanup: true
  draft: true           # Draft Release 
  prerelease: false
  on:
    branch: master      # release from master branch only
    tags: true          # deploy on tag push only

#after_deploy:


after_success:
  - echo "success"
 
after_failure:
  - echo "failure"

